<!DOCTYPE html>
<html>
<head>
    <title>Araba Arıza Tespit - Harita Entegrasyonu</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    
    <!-- MarkerCluster CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />
    
    <style>
        body { margin: 0; padding: 0; font-family: Arial, sans-serif; }
        #map { width: 100%; height: 100vh; }
        .map-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }
        .search-box {
            margin-bottom: 10px;
        }
        #search-input {
            padding: 8px;
            width: 200px;
        }
        button {
            padding: 8px 12px;
            background: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 3px;
        }
        button:hover {
            background: #45a049;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    
    <div class="map-controls">
        <div class="search-box">
            <input type="text" id="search-input" placeholder="Konum ara...">
            <button id="search-btn">Ara</button>
        </div>
        <button id="locate-btn">Konumumu Bul</button>
    </div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
    
    <script>
        // Haritayı başlat (Ankara merkezli)
        const map = L.map('map').setView([39.9334, 32.8597], 12);
        
        // OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        }).addTo(map);
        
        // Marker cluster grubu oluştur
        const markers = L.markerClusterGroup();
        map.addLayer(markers);
        
        // Örnek tamirci verileri
        const repairShops = [
            {id: 1, name: "Oto Tamir Ali Usta", lat: 39.919, lng: 32.854, type: "genel", phone: "0555 123 4567"},
            {id: 2, name: "Lastikçi Ahmet", lat: 39.925, lng: 32.851, type: "lastik", phone: "0555 765 4321"},
            {id: 3, name: "Kaporta Center", lat: 39.928, lng: 32.848, type: "kaporta", phone: "0555 111 2233"},
            {id: 4, name: "Elektrikçi Mehmet", lat: 39.931, lng: 32.862, type: "elektrik", phone: "0555 444 5566"},
            {id: 5, name: "Oto Yıkama & Tamir", lat: 39.935, lng: 32.855, type: "genel", phone: "0555 777 8899"}
        ];
        
        // Özel ikonlar
        const iconTypes = {
            genel: L.icon({iconUrl: 'https://cdn-icons-png.flaticon.com/512/484/484167.png', iconSize: [32, 32]}),
            lastik: L.icon({iconUrl: 'https://cdn-icons-png.flaticon.com/512/3659/3659898.png', iconSize: [32, 32]}),
            kaporta: L.icon({iconUrl: 'https://cdn-icons-png.flaticon.com/512/2936/2936886.png', iconSize: [32, 32]}),
            elektrik: L.icon({iconUrl: 'https://cdn-icons-png.flaticon.com/512/3659/3659899.png', iconSize: [32, 32]})
        };
        
        // Tamircileri haritaya ekle
        repairShops.forEach(shop => {
            const marker = L.marker([shop.lat, shop.lng], {
                icon: iconTypes[shop.type] || iconTypes.genel
            }).bindPopup(`
                <b>${shop.name}</b><br>
                Tür: ${shop.type}<br>
                Tel: ${shop.phone}<br>
                <button onclick="navigateToShop(${shop.id})">Yol Tarifi Al</button>
            `);
            
            markers.addLayer(marker);
        });
        
        // Konumumu bul butonu
        document.getElementById('locate-btn').addEventListener('click', () => {
            map.locate({setView: true, maxZoom: 15});
        });
        
        // Konum bulunduğunda
        map.on('locationfound', (e) => {
            L.marker(e.latlng, {
                icon: L.icon({
                    iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',
                    iconSize: [32, 32]
                })
            }).addTo(map)
            .bindPopup("Şu an buradasınız").openPopup();
            
            // Kullanıcı konumuna göre en yakın 3 tamirciyi bul
            const nearestShops = findNearestShops(e.latlng, repairShops, 3);
            alert(`En yakın tamirci: ${nearestShops[0].name}`);
        });
        
        // Konum bulunamadığında
        map.on('locationerror', (e) => {
            alert("Konum alınamadı: " + e.message);
        });
        
        // Arama fonksiyonu
        document.getElementById('search-btn').addEventListener('click', () => {
            const query = document.getElementById('search-input').value;
            if(query) {
                searchLocation(query);
            }
        });
        
        // Konum arama fonksiyonu (Nominatim API)
        async function searchLocation(query) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(query)}&format=json&limit=1&countrycodes=tr`);
                const data = await response.json();
                if(data[0]) {
                    map.setView([data[0].lat, data[0].lon], 15);
                } else {
                    alert("Konum bulunamadı");
                }
            } catch (error) {
                console.error("Arama hatası:", error);
                alert("Arama sırasında hata oluştu");
            }
        }
        
        // En yakın tamircileri bulma fonksiyonu
        function findNearestShops(userLocation, shops, count = 3) {
            // Basit mesafe hesaplama (Haversine formülü)
            function getDistance(lat1, lon1, lat2, lon2) {
                const R = 6371; // Dünya yarıçapı km
                const dLat = (lat2 - lat1) * Math.PI / 180;
                const dLon = (lon2 - lon1) * Math.PI / 180;
                const a = 
                    Math.sin(dLat/2) * Math.sin(dLat/2) +
                    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                    Math.sin(dLon/2) * Math.sin(dLon/2);
                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
                return R * c;
            }
            
            return [...shops]
                .sort((a, b) => 
                    getDistance(userLocation.lat, userLocation.lng, a.lat, a.lng) - 
                    getDistance(userLocation.lat, userLocation.lng, b.lat, b.lng)
                )
                .slice(0, count);
        }
        
        // Yol tarifi fonksiyonu (Örnek)
        function navigateToShop(shopId) {
            const shop = repairShops.find(s => s.id === shopId);
            if(shop && navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(userPos => {
                    const userLatLng = [userPos.coords.latitude, userPos.coords.longitude];
                    const shopLatLng = [shop.lat, shop.lng];
                    
                    // Gerçek uygulamada burada OSRM veya GraphHopper API kullanılır
                    alert(`${shop.name} için yol tarifi:\nKullanıcı konumu: ${userLatLng}\nTamirci konumu: ${shopLatLng}`);
                    
                    // Çizgi çizme (örnek)
                    L.polyline([userLatLng, shopLatLng], {color: 'red'}).addTo(map);
                });
            } else {
                alert("Konum bilgisi alınamadı veya tamirci bulunamadı");
            }
        }
    </script>
</body>
</html>